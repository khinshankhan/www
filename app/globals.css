@import "./styles/colors.css";
@import "./styles/hljs-github.css";

@import "tailwindcss";

@variant dark (&:is(.dark *));

@plugin "tailwindcss-animate";

@theme {
  --breakpoint-*: initial;
  --breakpoint-xss: 20rem; /* 320px */
  --breakpoint-xs: 24.5rem; /* 392px */
  --breakpoint-sm: 40rem; /* 640px */
  --breakpoint-md: 48rem; /* 768px -- this is the boundary between mobile vs desktop */
  --breakpoint-lg: 64rem; /* 1024px */
  --breakpoint-xl: 82.8125rem; /* 1325px */
  --breakpoint-2xl: 96rem; /* 1536px */

  --font-family-*: initial;
  --font-family-heading: var(--font-heading), ui-sans-serif, system-ui, sans-serif,
    "Apple Color Emoji", "Segoe UI Emoji";
  --font-family-body: var(--font-body), ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
    "Segoe UI Emoji";
  --font-family-mono: var(--font-mono), ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
    "Liberation Mono", "Courier New", monospace;
  --default-font-family: var(--font-family-body);
  --default-mono-font-family: var(--font-family-mono);

  --color-*: initial;
  --color-transparent: var(--transparent);

  --color-surface-1: var(--celestial-1);
  --color-surface-2: var(--celestial-2);
  --color-surface-3: var(--celestial-3);
  --color-surface-4: var(--celestial-4);
  --color-surface-5: var(--celestial-5);
  --color-surface-6: var(--celestial-6);
  --color-surface-7: var(--celestial-7);
  --color-surface-8: var(--celestial-8);
  --color-surface-9: var(--celestial-9);
  --color-surface-10: var(--celestial-10);
  --color-surface-11: var(--celestial-11);
  --color-surface-12: var(--celestial-12);

  --color-surface-a1: var(--celestial-a1);
  --color-surface-a2: var(--celestial-a2);
  --color-surface-a3: var(--celestial-a3);
  --color-surface-a4: var(--celestial-a4);
  --color-surface-a5: var(--celestial-a5);
  --color-surface-a6: var(--celestial-a6);
  --color-surface-a7: var(--celestial-a7);
  --color-surface-a8: var(--celestial-a8);
  --color-surface-a9: var(--celestial-a9);
  --color-surface-a10: var(--celestial-a10);
  --color-surface-a11: var(--celestial-a11);
  --color-surface-a12: var(--celestial-a12);

  --color-accent-1: var(--custom-1);
  --color-accent-2: var(--custom-2);
  --color-accent-3: var(--custom-3);
  --color-accent-4: var(--custom-4);
  --color-accent-5: var(--custom-5);
  --color-accent-6: var(--custom-6);
  --color-accent-7: var(--custom-7);
  --color-accent-8: var(--custom-8);
  --color-accent-9: var(--custom-9);
  --color-accent-10: var(--custom-10);
  --color-accent-11: var(--custom-11);
  --color-accent-12: var(--custom-12);

  --color-accent-a1: var(--custom-a1);
  --color-accent-a2: var(--custom-a2);
  --color-accent-a3: var(--custom-a3);
  --color-accent-a4: var(--custom-a4);
  --color-accent-a5: var(--custom-a5);
  --color-accent-a6: var(--custom-a6);
  --color-accent-a7: var(--custom-a7);
  --color-accent-a8: var(--custom-a8);
  --color-accent-a9: var(--custom-a9);
  --color-accent-a10: var(--custom-a10);
  --color-accent-a11: var(--custom-a11);
  --color-accent-a12: var(--custom-a12);

  --color-accent-contrast: var(--custom-contrast);
  --color-accent-surface: var(--custom-surface);
  --color-accent-indicator: var(--custom-indicator);
  --color-accent-track: var(--custom-track);

  /* semantic colors */
  --color-background-1: var(--background-1);
  --color-background-2: var(--background-2);
  --color-foreground: var(--gray-a12);

  --color-muted: var(--gray-4);
  --color-muted-foreground: var(--gray-a11);

  --color-knockout: var(--knockout);
  --color-knockout-foreground: var(--gray-1);

  --color-colorful-gradient: var(--colorful-gradient);

  /* Transition timing functions */
  --ease-*: initial;
  --ease-in: cubic-bezier(0.4, 0, 1, 1);
  --ease-out: cubic-bezier(0, 0, 0.2, 1);
  --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
  --ease-arrow-rotation: cubic-bezier(0.87, 0, 0.13, 1);

  --animate-collapsible-open: collapsible-slide-down 300ms ease-out;
  --animate-collapsible-close: collapsible-slide-up 300ms ease-out;
  --animate-waving-hand: waving 2.5s infinite;

  /* https://www.radix-ui.com/primitives/docs/components/collapsible#animating-content-size */
  @keyframes collapsible-slide-up {
    from {
      height: var(--radix-collapsible-content-height);
    }
    to {
      height: 0;
    }
  }
  @keyframes collapsible-slide-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-collapsible-content-height);
    }
  }
  /* https://jarv.is/notes/css-waving-hand-emoji/ */
  @keyframes waving {
    0% {
      transform: rotate(0deg);
    }
    10% {
      transform: rotate(14deg);
    }
    20% {
      transform: rotate(-8deg);
    }
    30% {
      transform: rotate(14deg);
    }
    40% {
      transform: rotate(-4deg);
    }
    50% {
      transform: rotate(10deg);
    }
    60% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(0deg);
    }
  }
}

@layer base {
  /* we define variables for light directly in :root in case the next-themes fails for some reason, could be a print setting */
  :root,
  .light {
    color-scheme: light dark;

    --knockout: #000;

    --background-1: var(--celestial-3);
    --background-2: var(--celestial-1);

    --colorful-gradient: #fffde5, #e9ffda, #dffbff, #ecefff, #f6e1ff, #ffe5f0;

    --icons-anchor: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath stroke='currentColor' fill='currentColor' d='m22 15-3-4-3 4h1.906c-.436 2.469-2.438 4.471-4.906 4.906V13h2v-2h-2V9.336c1.543-.459 2.714-1.923 2.714-3.621C15.714 3.666 14.048 2 12 2S8.286 3.666 8.286 5.715c0 1.698 1.171 3.162 2.714 3.621V11H9v2h2v6.906C8.531 19.471 6.529 17.469 6.094 15H8l-3-4-3 4h2.073c.511 3.885 3.929 7 7.927 7s7.416-3.115 7.927-7H22zM10.286 5.715C10.286 4.77 11.055 4 12 4s1.714.77 1.714 1.715c0 .951-.801 1.785-1.714 1.785s-1.714-.834-1.714-1.785z'/%3E%3C/svg%3E");
  }

  .light {
    color-scheme: light;
  }

  .dark {
    color-scheme: dark;

    --knockout: #fff;

    --background-1: var(--celestial-1);
    --background-2: var(--celestial-2);

    --colorful-gradient: #5a4b3c, #4c593d, #3a535f, #414758, #533f60, #604048;
  }

  /*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-6, currentColor);
  }
}

@layer components {
  /* style specific elements from here */
  html {
    touch-action: manipulation;
    scroll-behavior: auto;
  }
  html:focus-within {
    /* allows ctr-f to work without smooth scrolling https://css-tricks.com/fixing-smooth-scrolling-with-find-on-page/ */
    scroll-behavior: smooth;
  }

  ::selection {
    background: var(--color-accent-a7);
  }

  .bounded-page-layout {
    width: 100%;
    max-width: 90%;
    margin-left: auto;
    margin-right: auto;

    /* breakpoint xl */
    @media (min-width: 82.8125rem) {
      max-width: 77rem;
    }

    /* breakpoint 2xl */
    @media (min-width: 96rem) {
      max-width: 87.5rem;
    }
  }

  .bounded-content-layout {
    width: 100%;
    max-width: 90%;
    margin-left: auto;
    margin-right: auto;

    /* breakpoint xl */
    @media (min-width: 82.8125rem) {
      max-width: 62rem;
    }

    /* breakpoint 2xl */
    @media (min-width: 96rem) {
      max-width: 72rem;
    }
  }

  .bounded-with-sidebar-layout {
    max-width: 100%;
    /* breakpoint xl */
    @media (min-width: 82.8125rem) {
      max-width: 50rem;
    }

    /* breakpoint 2xl */
    @media (min-width: 96rem) {
      max-width: 60rem;
    }
  }

  /* General spacing of content, this is meant to cover cases that can't be easily done with inline classes.
   *
   * Keep in mind the phenomenon called 'margin collapsing', where if margins left and right or top and bottom meet and
   * they're they're both positive, instead of pushing away the additive distance, the larger of two margins is used.
   *
   * Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Mastering_margin_collapsing
   *
   * However, since if one margin is positive and the other is negative the additive distance is used, it's possible to
   * leverage 'negative margins' to bring elements closer such that a group of elements seem related.
   *
   * Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Mastering_margin_collapsing
   */
  .prose > * {
    margin-bottom: 1.25rem;

    /* breakpoint md */
    @media (min-width: 48rem) {
      margin-bottom: 1.375rem;
    }

    /* breakpoint lg */
    @media (min-width: 64rem) {
      margin-bottom: 1.5rem;
    }
  }

  /* spacing for headings */
  .prose :where(h1, h2, h3, h4, h5, h6):not(.not-prose, .not-prose *),
  .prose-heading:not(.not-prose, .not-prose *) {
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;

    /* breakpoint md */
    @media (min-width: 48rem) {
      margin-top: 1.75rem;
      margin-bottom: 0.875rem;
    }

    /* breakpoint lg */
    @media (min-width: 64rem) {
      margin-top: 2rem;
      margin-bottom: 1rem;
    }
  }

  /* list styles */
  .prose :where(ol, ul):not(.not-prose, .not-prose *) {
    padding-left: 1em;

    & :where(& > :not(:last-child)) {
      margin-bottom: 0.375em;
    }
  }

  /* sane defaults for list types */
  .prose ol :not(.not-prose, .not-prose *) {
    list-style-type: decimal;
  }
  .prose ol ol :not(.not-prose, .not-prose *) {
    list-style-type: lower-alpha;
  }
  .prose ol ol ol :not(.not-prose, .not-prose *) {
    list-style-type: lower-greek;
  }
  .prose ul :not(.not-prose, .not-prose *) {
    list-style-type: disc;
  }
  .prose ul ul :not(.not-prose, .not-prose *) {
    list-style-type: circle;
  }
  .prose ul ul ul :not(.not-prose, .not-prose *) {
    list-style-type: square;
  }

  /* code block styling */
  pre {
    /* codeblock line numbers based off https://github.com/shikijs/shiki/issues/3#issuecomment-830564854 */
    &[data-show-lines="true"] {
      counter-reset: step;
      counter-increment: step calc(var(--start, 1) - 1);
    }

    &[data-show-lines="true"] .line::before {
      content: counter(step);
      counter-increment: step;
      width: 1rem;
      margin-right: 1.5rem;
      display: inline-block;
      text-align: right;
      color: var(--color-muted-foreground);
    }

    code .line {
      display: block;
    }
  }

  /* image styling */
  [data-rmiz-modal-overlay="visible"] {
    background-color: color-mix(in srgb, var(--background-1) 80%, var(--transparent)) !important;
    backdrop-filter: blur(4px);
  }

  [data-rmiz-modal-overlay="hidden"] {
    background-color: var(--transparent) !important;
  }
}

/**
 * CSS variables can't be used outside of property values so media queries can't use breakpoints variables directly.
 * Reference: https://stackoverflow.com/questions/40722882/css-native-variables-not-working-in-media-queries
 *
 * Tailwind v4 doesn't yet support media query-related directives like `screen` (yet?). Therefore, we need to write out
 * the breakpoints explicitly and ensure they match Tailwind's configuration.
 *
 * Philosophy on show/hide: While "visible" has many possible states (block, inline-block, flex, grid), hiding content
 * (`display: none`) only has one state. To keep things simple, we'll use `display: none` for hiding and leave the code
 * to handle the specific visible state when showing (use a specific visible display property can mess with intended
 * experience). This assumption works for now but may need rethinking as the project evolves.
 *
 * Managing `!important`: It's hard to override one `!important` with another. Currently, we're handling this case by
 * applying print utility classes for specific print styles, but a case-by-case approach might be needed moving forward.
 */
@utility show-mobile {
  @media not print {
    @media (min-width: 48rem) {
      /* force hidden when not mobile */
      display: none !important;
    }
  }
}

@utility hide-mobile {
  @media not print {
    @media not all and (min-width: 48rem) {
      /* force hidden when mobile */
      display: none !important;
    }
  }
}

/**
 * Similar logic as to above, let the code define visible state, the utility class can only reliably define hidden
 * without accidentally changing an expected display.
 */
@utility hide-print {
  @media print {
    display: none !important;
  }
}

/* animations */
@utility custom-animation {
  animation: var(--animation);
}

/* effect to move back and forth, sort of looks like a jellyfish floating */
@keyframes jellyfish-floating-1 {
  0% {
    transform: translate(0, 0);
  }
  50% {
    transform: translate(-25px, -25px);
  }
  100% {
    transform: translate(0, 0);
  }
}

@keyframes jellyfish-floating-2 {
  0% {
    transform: translate(0, 0) scale(1);
  }
  50% {
    transform: translate(20px, 20px) scale(1.2);
  }
  100% {
    transform: translate(0, 0) scale(1);
  }
}

/* https://www.radix-ui.com/primitives/docs/components/collapsible#animating-content-size */
@utility animated-collapsible {
  overflow: hidden;
  &[data-state="open"] {
    animation: collapsible-slide-down 300ms ease-out;
  }
  &[data-state="closed"] {
    animation: collapsible-slide-up 300ms ease-out;
  }
}

/* based off fantia */
@keyframes background-animation {
  0% {
    background-position: 0% 25%;
  }
  50% {
    background-position: 100% 76%;
  }
  100% {
    background-position: 0% 25%;
  }
}

@utility animated-background {
  background: linear-gradient(277deg, var(--color-colorful-gradient));
  background-size: 1200% 1200%;
  animation: background-animation 10s ease infinite;
}

@utility show-underline {
  background-position: 0 100%;
}

@utility subtle-underline {
  background-size: 100% 0.0625em;
}

@utility drastic-underline {
  background-size: 100% 0.078125em;
}

@utility link-hide {
  background-size: 0% 0.05em;
}

@utility link-show {
  background-size: 100% 0.05em;
}

/* HACK: too lazy to figure out how to pass variant from markdown, much easier to just use classes */
@utility anchor-link {
  /* since color of url in content can't easily be adjusted, use the mask trick instead https://stackoverflow.com/a/66093928/7413060 */
  &:after {
    content: "";
    display: inline-block;
    margin: 0 0.125em;
    margin-left: -1em;
    width: 1em;
    height: 1em;
    /* these are kind of magic numbers based off a few trial and errors on one machine */
    transform: scale(0.85) translateY(0.15em);
    mask-image: var(--icons-anchor);
    mask-size: cover;
    background-color: transparent;
    @media (prefers-reduced-motion: no-preference) {
      transition:
        background-color 0.3s ease-out,
        margin 0.5s ease-in-out;
    }
  }
  &:hover:after {
    background-color: currentColor;
    margin-left: 0.125em;
    @media (prefers-reduced-motion: no-preference) {
      transition:
        background-color 0.7s ease-in,
        margin 0.5s ease-in-out;
    }
  }
}

/* based off https://css-tricks.com/grainy-gradients/ */
@utility noise {
  &:before {
    content: "";
    background-color: transparent;
    background-image: url("data:image/svg+xml,%3C!-- svg: first layer --%3E%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='10' numOctaves='1' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    background-repeat: repeat;
    background-size: 182px;
    opacity: 0.075;
    top: 0;
    left: 0;
    position: absolute;
    z-index: 0;
    width: 100%;
    height: 100%;
  }
}

@utility mask-gradient-reveal-from-left {
  mask-image: linear-gradient(
    to right,
    transparent 0%,
    transparent 10%,
    rgba(0, 0, 0, 0.5) 35%,
    rgba(0, 0, 0, 1) 100%
  );
  mask-size: cover;
}

@utility mask-gradient-reveal-from-right {
  mask-image: linear-gradient(
    to left,
    transparent 0%,
    transparent 10%,
    rgba(0, 0, 0, 0.5) 35%,
    rgba(0, 0, 0, 1) 100%
  );
  mask-size: cover;
}

@utility mask-gradient-reveal-center {
  mask-image: linear-gradient(to bottom, transparent 0%, rgba(0, 0, 0, 1) 35%),
    linear-gradient(to top, transparent 0%, rgba(0, 0, 0, 1) 35%),
    linear-gradient(to right, transparent 0%, rgba(0, 0, 0, 1) 25%),
    linear-gradient(to left, transparent 0%, rgba(0, 0, 0, 1) 25%);
  mask-size: cover;
  mask-composite: intersect;
}

/* credits to xetera for the initial idea */
/* resource: https://bennettfeely.com/clippy/ */
@utility clip-tl-br {
  clip-path: polygon(3% 0, 100% 0, 100% 100%, 20% 100%);
}
@utility clip-tr-bl {
  clip-path: polygon(0 0, 97% 0, 80% 100%, 0 100%);
}

/* based off https://github.com/chakra-ui/chakra-ui/blob/main/packages/components/layout/src/link-box.tsx */
@utility link-overlay {
  position: static;
  &:after {
    content: "";
    cursor: inherit;
    transition: transform 0.3s ease;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    display: block;
    height: 100%;
    width: 100%;
  }
}

@utility link-box {
  position: relative;
  isolation: isolate;
  /* elevate elements that are interactable also give special linkbox-elevate class privilege as a catchall */
  & :is(a[href]:not(.link-overlay), button, .linkbox-elevate) {
    z-index: 1;
  }
}

/* loosely based off https://codepen.io/brucebrotherton/pen/GRxwQar */
@utility surround-quotes {
  &:before,
  &:after {
    color: var(--color-muted-foreground);
    position: absolute;
    font-size: 5rem;
  }
  &:before {
    top: -3.75rem;
    left: 0rem;
    content: open-quote;
  }
  &:after {
    bottom: -5.25rem;
    right: 1.25rem;
    content: close-quote;
  }
}
