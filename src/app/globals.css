@import "tailwindcss";

@import "./styles/colors.css";
@import "./styles/prose.css";

@custom-variant dark (&:where(.dark *));
@custom-variant light (&:where(.light *));

@plugin "tailwindcss-animate";

@theme inline {
  --breakpoint-*: initial;
  --breakpoint-xss: 20rem; /* 320px */
  --breakpoint-xs: 24.5rem; /* 392px */
  --breakpoint-sm: 40rem; /* 640px */
  --breakpoint-md: 48rem; /* 768px -- this is the boundary between mobile vs desktop */
  --breakpoint-lg: 64rem; /* 1024px */
  --breakpoint-xl: 82.8125rem; /* 1325px */
  --breakpoint-2xl: 96rem; /* 1536px */

  --font-family-*: initial;
  --font-family-heading:
    var(--font-heading), ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
  --font-family-body:
    var(--font-body), ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
  --font-family-mono:
    var(--font-mono), ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
    "Courier New", monospace;
  --default-font-family: var(--font-family-body);
  --default-mono-font-family: var(--font-family-mono);

  --text-*: initial;
  --text-12: 0.75rem;
  --text-12--line-height: calc(1 / 0.75);
  --text-14: 0.875rem;
  --text-14--line-height: calc(1.25 / 0.875);
  --text-16: 1rem;
  --text-16--line-height: calc(1.5 / 1);
  --text-18: 1.125rem;
  --text-18--line-height: calc(1.75 / 1.125);
  --text-20: 1.25rem;
  --text-20--line-height: calc(1.75 / 1.25);
  --text-22: 1.375rem;
  --text-22--line-height: calc(1.75 / 1.375);
  --text-24: 1.5rem;
  --text-24--line-height: calc(2 / 1.5);
  --text-30: 1.875rem;
  --text-30--line-height: calc(2.25 / 1.875);
  --text-36: 2.25rem;
  --text-36--line-height: calc(2.5 / 2.25);
  --text-48: 3rem;
  --text-48--line-height: 1;
  --text-60: 3.75rem;
  --text-60--line-height: 1;
  --text-72: 4.5rem;
  --text-72--line-height: 1;

  --color-*: initial;
  --color-transparent: var(--transparent);
  --color-black: var(--black);
  --color-white: var(--white);

  --color-stark-contrast: var(--stark-contrast);

  --color-surface-1: var(--celestial-1);
  --color-surface-2: var(--celestial-2);
  --color-surface-3: var(--celestial-3);
  --color-surface-4: var(--celestial-4);
  --color-surface-5: var(--celestial-5);
  --color-surface-6: var(--celestial-6);
  --color-surface-7: var(--celestial-7);
  --color-surface-8: var(--celestial-8);
  --color-surface-9: var(--celestial-9);
  --color-surface-10: var(--celestial-10);
  --color-surface-11: var(--celestial-11);
  --color-surface-12: var(--celestial-12);

  --color-surface-a1: var(--celestial-a1);
  --color-surface-a2: var(--celestial-a2);
  --color-surface-a3: var(--celestial-a3);
  --color-surface-a4: var(--celestial-a4);
  --color-surface-a5: var(--celestial-a5);
  --color-surface-a6: var(--celestial-a6);
  --color-surface-a7: var(--celestial-a7);
  --color-surface-a8: var(--celestial-a8);
  --color-surface-a9: var(--celestial-a9);
  --color-surface-a10: var(--celestial-a10);
  --color-surface-a11: var(--celestial-a11);
  --color-surface-a12: var(--celestial-a12);

  --color-accent-1: var(--accent-1);
  --color-accent-2: var(--accent-2);
  --color-accent-3: var(--accent-3);
  --color-accent-4: var(--accent-4);
  --color-accent-5: var(--accent-5);
  --color-accent-6: var(--accent-6);
  --color-accent-7: var(--accent-7);
  --color-accent-8: var(--accent-8);
  --color-accent-9: var(--accent-9);
  --color-accent-10: var(--accent-10);
  --color-accent-11: var(--accent-11);
  --color-accent-12: var(--accent-12);

  --color-accent-a1: var(--accent-a1);
  --color-accent-a2: var(--accent-a2);
  --color-accent-a3: var(--accent-a3);
  --color-accent-a4: var(--accent-a4);
  --color-accent-a5: var(--accent-a5);
  --color-accent-a6: var(--accent-a6);
  --color-accent-a7: var(--accent-a7);
  --color-accent-a8: var(--accent-a8);
  --color-accent-a9: var(--accent-a9);
  --color-accent-a10: var(--accent-a10);
  --color-accent-a11: var(--accent-a11);
  --color-accent-a12: var(--accent-a12);

  /* semantic tokens */
  --color-background-1: var(--color-surface-2);
  --color-background-2: var(--color-surface-1);

  --color-foreground-strong: var(--color-surface-12);
  --color-foreground: color-mix(in oklab, var(--color-surface-12) 90%, transparent);
  --color-foreground-muted: color-mix(in oklab, var(--color-surface-12) 70%, transparent);
  --color-foreground-subtle: color-mix(in oklab, var(--color-surface-12) 60%, transparent);

  --color-border: var(--color-surface-7);

  /* transition timing functions */
  --ease-*: initial;
  --ease-in: cubic-bezier(0.4, 0, 1, 1);
  --ease-out: cubic-bezier(0, 0, 0.2, 1);
  --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
  --ease-arrow-rotation: cubic-bezier(0.87, 0, 0.13, 1);

  --animate-fade-in: fade-in var(--animation-duration, 1s) ease-in both;
  --animate-bg-fade-in: bg-fade-in var(--animation-duration, 1s) ease-in both;
  --animate-waving-hand: waving 2.5s infinite;

  /* animations */
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  @keyframes bg-fade-in {
    from {
      background-color: var(--from-color, var(--color-background-1));
    }
    to {
      background-color: var(--to-color, var(--color-background-1));
    }
  }

  /* https://jarv.is/notes/css-waving-hand-emoji/ */
  @keyframes waving {
    0% {
      transform: rotate(0deg);
    }
    10% {
      transform: rotate(14deg);
    }
    20% {
      transform: rotate(-8deg);
    }
    30% {
      transform: rotate(14deg);
    }
    40% {
      transform: rotate(-4deg);
    }
    50% {
      transform: rotate(10deg);
    }
    60% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(0deg);
    }
  }
}

* {
  scrollbar-color: var(--color-foreground) var(--color-background-2);
}

/**
 * CSS variables can't be used outside of property values so media queries can't use breakpoints variables directly.
 * Reference: https://stackoverflow.com/questions/40722882/css-native-variables-not-working-in-media-queries
 *
 * Philosophy on show/hide: While "visible" has many possible states (block, inline-block, flex, grid), hiding content
 * (`display: none`) only has one state. To keep things simple, we'll use `display: none` for hiding and leave the code
 * to handle the specific visible state when showing (use a specific visible display property can mess with intended
 * experience). This assumption works for now but may need rethinking as the project evolves.
 *
 * Managing `!important`: It's hard to override one `!important` with another. Currently, we're handling this case by
 * applying print utility classes for specific print styles, but a case-by-case approach might be needed moving forward.
 */
@utility show-mobile {
  @media not print {
    @media (min-width: theme(--breakpoint-md)) {
      /* force hidden when not mobile */
      display: none !important;
    }
  }
}

@utility hide-mobile {
  @media not print {
    @media not all and (min-width: theme(--breakpoint-md)) {
      /* force hidden when mobile */
      display: none !important;
    }
  }
}

/**
 * Similar logic as to above, let the code define visible state, the utility class can only reliably define hidden
 * without accidentally changing an expected display.
 */
@utility hide-print {
  @media print {
    display: none !important;
  }
}

.maxw-page {
  --maxw-page: 90%;
  max-width: var(--maxw-page);

  @media (min-width: theme(--breakpoint-xl)) {
    --maxw-page: 77rem;
  }

  @media (min-width: theme(--breakpoint-2xl)) {
    --maxw-page: 87.5rem;
  }
}

.maxw-content {
  --maxw-content: 90%;
  max-width: var(--maxw-content);

  @media (min-width: theme(--breakpoint-xl)) {
    --maxw-content: 62rem;
  }

  @media (min-width: theme(--breakpoint-2xl)) {
    --maxw-content: 72rem;
  }
}

.maxw-content-with-sidebar {
  --sidebar-w: 100%;
  --sidebar-gap: 0rem;
  max-width: 100%;

  @media (min-width: theme(--breakpoint-xl)) {
    --sidebar-w: 17rem;
    --sidebar-gap: 4rem;
    max-width: calc(100% + var(--sidebar-gap) - var(--sidebar-w));
  }
  @media (min-width: theme(--breakpoint-2xl)) {
    --sidebar-w: 18rem;
    max-width: calc(100% + var(--sidebar-gap) - var(--sidebar-w));
  }
}

@layer base {
  /* we define variables for light directly in :root in case the next-themes fails for some reason, could be a print setting */
  :root,
  .light {
    color-scheme: light dark;
  }

  .light {
    color-scheme: light;
  }

  .dark {
    color-scheme: dark;
  }

  /*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-6, currentColor);
  }
}

@layer components {
  /* style specific elements from here */
  html {
    touch-action: manipulation;
    scroll-behavior: auto;
  }
  html:focus-within {
    /* allows ctr-f to work without smooth scrolling https://css-tricks.com/fixing-smooth-scrolling-with-find-on-page/ */
    scroll-behavior: smooth;
  }

  /* this gives a nice highlight color for text selection, especially as we switch between section types */
  ::selection {
    background: var(--color-accent-a7);
  }
}

/* NOTE: this should be used in unision with animate-fade-in utility */
@utility reveal-on-scroll {
  opacity: 0;
  animation-duration: 1ms;
  animation-timeline: scroll();
  animation-range: 0 var(--range, 100px);
  animation-fill-mode: both;
  animation-timing-function: steps(100, end);
}

/* NOTE: this should be used in unision with animate-bg-fade-in utility */
@utility reveal-bg-on-scroll {
  background-color: var(--from-color, var(--color-background-1));
  animation-duration: 1ms;
  animation-timeline: scroll();
  animation-range: 0 var(--range, 100px);
  animation-fill-mode: both;
  animation-timing-function: steps(100, end);
}

/* link styling */
@utility show-underline {
  background-position: 0 100%;
}

@utility subtle-underline {
  background-size: 100% 0.0625em;
}

@utility drastic-underline {
  background-size: 100% 0.078125em;
}

@utility link-hide {
  background-size: 0% 0.05em;
}

@utility link-show {
  background-size: 100% 0.05em;
}

/* based off https://github.com/chakra-ui/chakra-ui/blob/main/packages/components/layout/src/link-box.tsx */
@utility link-overlay {
  position: static;
  &:after {
    content: "";
    cursor: inherit;
    transition: transform 0.3s ease;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    display: block;
    height: 100%;
    width: 100%;
  }
}

@utility link-box {
  position: relative;
  isolation: isolate;
  /* elevate elements that are interactable also give special linkbox-elevate class privilege as a catchall */
  & :is(a[href]:not(.link-overlay), button, .linkbox-elevate) {
    z-index: 1;
  }
}

/* HACK: too lazy to figure out how to pass variant from markdown, much easier to just use classes */
@utility anchor-link {
  /* since color of url in content can't easily be adjusted, use the mask trick instead https://stackoverflow.com/a/66093928/7413060 */
  &:after {
    content: "";
    display: inline-block;
    margin: 0 0.125em;
    margin-left: -1em;
    width: 1em;
    height: 1em;
    /* these are kind of magic numbers based off a few trial and errors on one machine */
    transform: scale(0.85) translateY(0.15em);
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath stroke='currentColor' fill='currentColor' d='m22 15-3-4-3 4h1.906c-.436 2.469-2.438 4.471-4.906 4.906V13h2v-2h-2V9.336c1.543-.459 2.714-1.923 2.714-3.621C15.714 3.666 14.048 2 12 2S8.286 3.666 8.286 5.715c0 1.698 1.171 3.162 2.714 3.621V11H9v2h2v6.906C8.531 19.471 6.529 17.469 6.094 15H8l-3-4-3 4h2.073c.511 3.885 3.929 7 7.927 7s7.416-3.115 7.927-7H22zM10.286 5.715C10.286 4.77 11.055 4 12 4s1.714.77 1.714 1.715c0 .951-.801 1.785-1.714 1.785s-1.714-.834-1.714-1.785z'/%3E%3C/svg%3E");
    mask-size: cover;
    background-color: transparent;
    @media (prefers-reduced-motion: no-preference) {
      transition:
        background-color 0.3s ease-out,
        margin 0.5s ease-in-out;
    }
  }
  &:hover:after {
    background-color: currentColor;
    margin-left: 0.125em;
    @media (prefers-reduced-motion: no-preference) {
      transition:
        background-color 0.7s ease-in,
        margin 0.5s ease-in-out;
    }
  }
}

/* based off https://css-tricks.com/grainy-gradients/ */
@utility noise {
  &:before {
    content: "";
    background-color: transparent;
    background-image: url("data:image/svg+xml,%3C!-- svg: first layer --%3E%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='10' numOctaves='1' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    background-repeat: repeat;
    background-size: 182px;
    opacity: 0.15;
    top: 0;
    left: 0;
    position: absolute;
    z-index: 0;
    width: 100%;
    height: 100%;
  }
}
